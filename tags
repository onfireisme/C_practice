!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARRAYLENGTH	algorithms/quickSort.h	5;"	d
ARRAYLENGTH	dataStructure/B+Tree.h	5;"	d
ARRAY_COUNT	dataStructure/binary_sort_tree.h	/^int static ARRAY_COUNT=1;$/;"	v
ARRAY_LENGTH	dataStructure/binary_sort_tree.h	9;"	d
BIG	algorithms/quickSort.h	11;"	d
BOOL	algorithms/quickSort.h	/^typedef int BOOL;$/;"	t
BOOL	dataStructure/B+Tree.h	/^typedef int BOOL;$/;"	t
BTreeCreate	dataStructure/B+Tree.c	/^void BTreeCreate(BTreeNode *rootNode){$/;"	f
BTreeInsert	dataStructure/B+Tree.c	/^void BTreeInsert(BTreeNode *rootNode,KeyType keyValue){$/;"	f
BTreeNode	dataStructure/B+Tree.h	/^}BTreeNode;$/;"	t	typeref:struct:MyNode
DEGREE	dataStructure/B+Tree.h	10;"	d
DIVIDEDNUMBER	algorithms/quickSort.h	8;"	d
DIVIDEDNUMBER	dataStructure/B+Tree.h	8;"	d
DeQueue	dataStructure/queue.c	/^void DeQueue(Queue *queue){$/;"	f
DeleteTreeNode	dataStructure/binary_sort_tree.c	/^void DeleteTreeNode(TreeNode *root_node,int node_value){$/;"	f
EnQueue	dataStructure/queue.c	/^void EnQueue(queueElementType element,Queue *queue){$/;"	f
FALSE	algorithms/quickSort.h	4;"	d
FALSE	dataStructure/B+Tree.h	4;"	d
FALSE	dataStructure/binary_heap.h	4;"	d
FALSE	dataStructure/binary_sort_tree.h	8;"	d
FALSE	dataStructure/queue.h	5;"	d
GlobalPointTemp	dataStructure/binary_sort_tree.h	/^int *GlobalPointTemp;$/;"	v
HEAPLENGTH	dataStructure/binary_heap.h	5;"	d
Heap	dataStructure/binary_heap.h	/^}Heap;$/;"	t	typeref:struct:myHeap
InitBinaryTree	dataStructure/binary_sort_tree.c	/^TreeNode *InitBinaryTree(int node_value){$/;"	f
InsertTreeNode	dataStructure/binary_sort_tree.c	/^void InsertTreeNode(TreeNode *root_node,int node_value){$/;"	f
K	algorithms/quickSort.h	13;"	d
KeyType	dataStructure/B+Tree.h	/^typedef int KeyType;$/;"	t
LANDMAKR_PATH	others/fopen.c	4;"	d	file:
LANDMARK_NUMBER	others/fopen.c	3;"	d	file:
LEAF	dataStructure/B+Tree.h	13;"	d
LEAFNODEPOINTERARRAYLENGTH	dataStructure/B+Tree.h	11;"	d
LEFT_NODE	dataStructure/binary_sort_tree.h	5;"	d
LOOPCOUNTMAX	algorithms/quickSort.h	12;"	d
MIDDLE	algorithms/quickSort.h	9;"	d
MIDDLE	dataStructure/B+Tree.h	9;"	d
MaxElement	dataStructure/queue.c	/^queueElementType MaxElement(){$/;"	f
MyNode	dataStructure/B+Tree.h	/^typedef struct MyNode{$/;"	s
MyStack	dataStructure/two_stack_form_one_queue/stack.h	/^}MyStack;$/;"	t	typeref:struct:__anon2
NEGATIVE	dataStructure/B+Tree.h	16;"	d
NEGATIVE_SINGNAL	dataStructure/two_stack_form_one_queue/stack.h	4;"	d
NIL	dataStructure/binary_sort_tree.h	4;"	d
NodeType	algorithms/quickSort.h	/^typedef int NodeType;$/;"	t
NodeType	dataStructure/B+Tree.h	/^typedef int NodeType;$/;"	t
NodeType	dataStructure/binary_heap.h	/^typedef int NodeType;$/;"	t
POINTERSIZE	dataStructure/B+Tree.h	15;"	d
PrintNodeValue	dataStructure/binary_sort_tree.c	/^void PrintNodeValue(TreeNode *arbitrary_tree_node){$/;"	f
QUEUE_LENGTH	dataStructure/queue.h	6;"	d
Queue	dataStructure/queue.h	/^}Queue;$/;"	t	typeref:struct:__anon3
RANDOMMAX	algorithms/quickSort.h	6;"	d
RANDOMMAX	dataStructure/B+Tree.h	6;"	d
RIGHT_NODE	dataStructure/binary_sort_tree.h	6;"	d
ReMallocNodeArray	dataStructure/binary_sort_tree.c	/^void ReMallocNodeArray(TreeNode **tree_node_array){$/;"	f
SIZEOFP	dataStructure/binary_sort_tree.h	/^int static const SIZEOFP=sizeof(GlobalPointTemp);$/;"	v
SMALL	algorithms/quickSort.h	10;"	d
STACK_LENGTH	dataStructure/two_stack_form_one_queue/stack.h	3;"	d
STRING_ONE_BEGIN	algorithms/calculate_string_distance.h	5;"	d
STRING_TWO_BEGIN	algorithms/calculate_string_distance.h	6;"	d
StackFormedQueue	dataStructure/two_stack_form_one_queue/two_stack_form_one_queue.h	/^}StackFormedQueue;$/;"	t	typeref:struct:__anon1
TRUE	algorithms/quickSort.h	3;"	d
TRUE	dataStructure/B+Tree.h	3;"	d
TRUE	dataStructure/binary_heap.h	3;"	d
TRUE	dataStructure/binary_sort_tree.h	7;"	d
TRUE	dataStructure/queue.h	4;"	d
TreeDepth	dataStructure/binary_sort_tree.c	/^int TreeDepth(TreeNode *tree_node){$/;"	f
TreeLevelTraversal	dataStructure/binary_sort_tree.c	/^void TreeLevelTraversal(TreeNode *root_node){$/;"	f
TreeMaximumNode	dataStructure/binary_sort_tree.c	/^TreeNode *TreeMaximumNode(TreeNode *temporary_node){$/;"	f
TreeMinimumNode	dataStructure/binary_sort_tree.c	/^TreeNode *TreeMinimumNode(TreeNode *temporary_node){$/;"	f
TreeNode	dataStructure/binary_sort_tree.h	/^}TreeNode;$/;"	t	typeref:struct:tree_node_tag
TreeNodeMalloc	dataStructure/binary_sort_tree.c	/^TreeNode *TreeNodeMalloc(){$/;"	f
TreeSearch	dataStructure/binary_sort_tree.c	/^TreeNode *TreeSearch(TreeNode *root_node, int searched_node_value){$/;"	f
TreeSuccessor	dataStructure/binary_sort_tree.c	/^TreeNode *TreeSuccessor(TreeNode *temporary_node){$/;"	f
ULONGLONG	algorithms/find_number_one.c	/^typedef int ULONGLONG;$/;"	t	file:
UNLEAF	dataStructure/B+Tree.h	14;"	d
UNLEAFNODEPOINTERARRAYLENGTH	dataStructure/B+Tree.h	12;"	d
begin	dataStructure/queue.h	/^	int begin;$/;"	m	struct:__anon3
buildMaxHeap	dataStructure/binary_heap.c	/^void buildMaxHeap(Heap *localHeap,int nodePosition){$/;"	f
calculate_string_distance	algorithms/calculate_string_distance.c	/^int calculate_string_distance(char *string_one,char *string_two,$/;"	f
calculate_string_distance_recursion	algorithms/calculate_string_distance.c	/^int calculate_string_distance_recursion(char *string_one,char *string_two,$/;"	f
childNodePointerArray	dataStructure/B+Tree.h	/^	struct MyNode **childNodePointerArray;$/;"	m	struct:MyNode	typeref:struct:MyNode::MyNode
copy_stack	dataStructure/two_stack_form_one_queue/two_stack_form_one_queue.c	/^void copy_stack(StackFormedQueue *localQueue){$/;"	f
countOneNumber	algorithms/find_number_one.c	/^int countOneNumber(ULONGLONG number){$/;"	f
create_list	dataStructure/linked_list.c	/^void create_list(list_node *local_guard_node){$/;"	f
current_position	dataStructure/two_stack_form_one_queue/stack.h	/^	int current_position;$/;"	m	struct:__anon2
deQueue	dataStructure/two_stack_form_one_queue/two_stack_form_one_queue.c	/^void deQueue(StackFormedQueue *localQueue){$/;"	f
delete_node	dataStructure/linked_list.c	/^void delete_node(list_node *local_guard_node, int local_value){$/;"	f
double_copy_string	algorithms/string_rotate_check.c	/^char * double_copy_string(char *source_string,int string_length){$/;"	f
elementCount	dataStructure/queue.h	/^	int elementCount;$/;"	m	struct:__anon3
enQueue	dataStructure/two_stack_form_one_queue/two_stack_form_one_queue.c	/^void enQueue(StackFormedQueue *localQueue,stackNodeType local_node){$/;"	f
end	dataStructure/queue.h	/^	int end;$/;"	m	struct:__anon3
false	algorithms/calculate_string_distance.h	3;"	d
false	algorithms/string_rotate_check.h	3;"	d
fatherNode	dataStructure/B+Tree.h	/^	struct MyNode *fatherNode;$/;"	m	struct:MyNode	typeref:struct:MyNode::MyNode
father_node	dataStructure/binary_sort_tree.h	/^	struct tree_node_tag *father_node;$/;"	m	struct:tree_node_tag	typeref:struct:tree_node_tag::tree_node_tag
freeHeap	dataStructure/binary_heap.c	/^void freeHeap(Heap *localHeap){$/;"	f
freeQueue	dataStructure/two_stack_form_one_queue/two_stack_form_one_queue.c	/^void freeQueue(StackFormedQueue *localQueue){$/;"	f
freeStack	dataStructure/two_stack_form_one_queue/stack.c	/^void freeStack(MyStack *local_stack){$/;"	f
free_node	dataStructure/linked_list.c	/^void free_node(list_node *guard_node){$/;"	f
generateRandomArray	algorithms/quickSort.c	/^void generateRandomArray(NodeType *sortArray){$/;"	f
generateRandomIntArray	dataStructure/B+Tree.c	/^void generateRandomIntArray(KeyType *array,int arrayLength){$/;"	f
getDivideUpperBound	algorithms/quickSort.c	/^int getDivideUpperBound(int divideNumber,int dividedNumber){$/;"	f
getSortedHeap	dataStructure/binary_heap.c	/^void getSortedHeap(Heap *localHeap){$/;"	f
globalRootNode	dataStructure/B+Tree.h	/^BTreeNode *globalRootNode;$/;"	v
globalSortArray	algorithms/quickSort.h	/^NodeType *globalSortArray;$/;"	v
head	dataStructure/linked_list.h	/^	list_node head;$/;"	m	struct:list_tag
heapSort	dataStructure/binary_heap.c	/^void heapSort(Heap *localHeap){$/;"	f
initialHeap	dataStructure/binary_heap.c	/^void initialHeap(Heap *localHeap){$/;"	f
initialNode	dataStructure/B+Tree.c	/^void initialNode(BTreeNode **newNode,BTreeNode *fatherNode,NodeType nodeType$/;"	f
initialQueue	dataStructure/two_stack_form_one_queue/two_stack_form_one_queue.c	/^void initialQueue(StackFormedQueue *localQueue){$/;"	f
initialStack	dataStructure/two_stack_form_one_queue/stack.c	/^void initialStack(MyStack *temp_stack){$/;"	f
insertIntoPointerArray	dataStructure/B+Tree.c	/^void insertIntoPointerArray(BTreeNode *fatherNode,int insertPostion,$/;"	f
insertNewKeyValue	dataStructure/B+Tree.c	/^void insertNewKeyValue(BTreeNode *node,KeyType keyValue){$/;"	f
insertSpecifiedKeyValue	dataStructure/B+Tree.c	/^void insertSpecifiedKeyValue(KeyType *keyValueArray,int insertPostion,$/;"	f
insert_node	dataStructure/linked_list.c	/^void insert_node(list_node *local_guard_node,int new_node_value){$/;"	f
isNodeFull	dataStructure/B+Tree.c	/^BOOL isNodeFull(BTreeNode *node){$/;"	f
is_include_rotate_string	algorithms/string_rotate_check.c	/^int is_include_rotate_string(char *compared_string,$/;"	f
keyValueArray	dataStructure/B+Tree.h	/^	KeyType keyValueArray[2*DEGREE-1];$/;"	m	struct:MyNode
keyValueArraySplit	dataStructure/B+Tree.c	/^void keyValueArraySplit(KeyType *keyValueArrayOne,KeyType *keyValueArrayTwo){$/;"	f
keyValueCurrentIndex	dataStructure/B+Tree.h	/^	int keyValueCurrentIndex;$/;"	m	struct:MyNode
lastNodePosition	dataStructure/binary_heap.h	/^	int lastNodePosition;$/;"	m	struct:myHeap
left_child_node	dataStructure/binary_sort_tree.h	/^	struct tree_node_tag *left_child_node;$/;"	m	struct:tree_node_tag	typeref:struct:tree_node_tag::tree_node_tag
length	dataStructure/linked_list.h	/^	int length;$/;"	m	struct:list_tag
linked_list	dataStructure/linked_list.h	/^}linked_list;$/;"	t	typeref:struct:list_tag
list_node	dataStructure/linked_list.h	/^}list_node;$/;"	t	typeref:struct:node_tag
list_search	dataStructure/linked_list.c	/^list_node *list_search(list_node *local_guard_node,int local_node_value){$/;"	f
list_tag	dataStructure/linked_list.h	/^typedef struct list_tag{$/;"	s
main	algorithms/calculate_string_distance.c	/^int main(void){$/;"	f
main	algorithms/find_number_one.c	/^int main(void){$/;"	f
main	algorithms/quickSort.c	/^int main(void){$/;"	f
main	algorithms/reversal_char.c	/^int main(){$/;"	f
main	algorithms/string_rotate_check.c	/^int main(void){$/;"	f
main	dataStructure/B+Tree.c	/^int main(void){$/;"	f
main	dataStructure/binary_heap.c	/^int main(void){$/;"	f
main	dataStructure/binary_sort_tree.c	/^int main(void){$/;"	f
main	dataStructure/linked_list.c	/^int main(){$/;"	f
main	dataStructure/queue.c	/^int main(void){$/;"	f
main	dataStructure/two_stack_form_one_queue/two_stack_form_one_queue.c	/^int main(void){$/;"	f
main	others/fopen.c	/^int main(void){$/;"	f
mallocMedianArray	algorithms/quickSort.c	/^void mallocMedianArray(NodeType *medians,int columns){$/;"	f
maxNodeIndexArray	dataStructure/two_stack_form_one_queue/stack.h	/^	node_type *maxNodeIndexArray;$/;"	m	struct:__anon2
maxPosition	dataStructure/two_stack_form_one_queue/stack.h	/^	int maxPosition;$/;"	m	struct:__anon2
maxQueueElement	dataStructure/two_stack_form_one_queue/two_stack_form_one_queue.c	/^stackNodeType maxQueueElement(StackFormedQueue *localQueue){$/;"	f
maxStackElement	dataStructure/two_stack_form_one_queue/stack.c	/^node_type maxStackElement(MyStack *temp_stack){$/;"	f
medianOfFive	algorithms/quickSort.c	/^NodeType medianOfFive(NodeType *sortArray,int beginFlag,int endFlag){$/;"	f
medianOfMediansQuickSelect	algorithms/quickSort.c	/^NodeType medianOfMediansQuickSelect(NodeType *sortArray,int KthNumber){$/;"	f
medianOfMediansQuickSelectRecursion	algorithms/quickSort.c	/^NodeType medianOfMediansQuickSelectRecursion(NodeType *sortArray,int beginFlag,$/;"	f
middleValueQuickSort	algorithms/quickSort.c	/^void middleValueQuickSort(NodeType *sortArray){$/;"	f
middleValueQuickSortRecursion	algorithms/quickSort.c	/^void middleValueQuickSortRecursion(int beginFlag,int endFlag,NodeType *sortArray){$/;"	f
myHeap	dataStructure/binary_heap.h	/^typedef struct myHeap{$/;"	s
next_node	dataStructure/linked_list.h	/^	struct	node_tag *next_node;$/;"	m	struct:node_tag	typeref:struct:node_tag::node_tag
nodeArray	dataStructure/binary_heap.h	/^	NodeType *nodeArray;$/;"	m	struct:myHeap
nodeArray	dataStructure/two_stack_form_one_queue/stack.h	/^	node_type *nodeArray;$/;"	m	struct:__anon2
nodeType	dataStructure/B+Tree.h	/^	NodeType nodeType;$/;"	m	struct:MyNode
node_malloc	dataStructure/linked_list.c	/^list_node *node_malloc(){$/;"	f
node_tag	dataStructure/linked_list.h	/^typedef struct node_tag{$/;"	s
node_type	dataStructure/two_stack_form_one_queue/stack.h	/^typedef int node_type;$/;"	t
node_value	dataStructure/binary_sort_tree.h	/^	int node_value;$/;"	m	struct:tree_node_tag
node_value	dataStructure/linked_list.h	/^	int node_value;$/;"	m	struct:node_tag
pivotPartition	algorithms/quickSort.c	/^int pivotPartition(NodeType *sortArray,NodeType pivot,int beginFlag,int endFlag){$/;"	f
pointerArraySplit	dataStructure/B+Tree.c	/^void pointerArraySplit(BTreeNode **pointerArrayOne,BTreeNode **pointerArrayTwo){$/;"	f
pointerCurrentIndex	dataStructure/B+Tree.h	/^	int pointerCurrentIndex;$/;"	m	struct:MyNode
pop	dataStructure/two_stack_form_one_queue/stack.c	/^void pop(MyStack *temp_stack){$/;"	f
positionAtFatherNode	dataStructure/B+Tree.h	/^	int positionAtFatherNode;$/;"	m	struct:MyNode
previous_node	dataStructure/linked_list.h	/^	struct  node_tag *previous_node;$/;"	m	struct:node_tag	typeref:struct:node_tag::node_tag
push	dataStructure/two_stack_form_one_queue/stack.c	/^void push(MyStack *temp_stack,node_type node_value){$/;"	f
pushNode	dataStructure/binary_heap.c	/^void pushNode(Heap *localHeap,NodeType nodeValue){$/;"	f
queueArray	dataStructure/queue.h	/^	queueElementType *queueArray;$/;"	m	struct:__anon3
queueElementType	dataStructure/queue.h	/^typedef int queueElementType;$/;"	t
queueInitialize	dataStructure/queue.c	/^void queueInitialize(Queue *queue){$/;"	f
quickSelectSmallestNumberRecursion	algorithms/quickSort.c	/^NodeType quickSelectSmallestNumberRecursion(NodeType *sortArray,int beginFlag,$/;"	f
quickSort	algorithms/quickSort.c	/^void quickSort(NodeType *sortArray){$/;"	f
quickSortRecursion	algorithms/quickSort.c	/^void quickSortRecursion(int beginFlag,int endFlag,NodeType *sortArray){$/;"	f
random	algorithms/quickSort.h	7;"	d
random	dataStructure/B+Tree.h	7;"	d
reMalloc	dataStructure/two_stack_form_one_queue/stack.c	/^void reMalloc(MyStack *temp_stack){$/;"	f
reversal_string	algorithms/reversal_char.c	/^void reversal_string(char *source_string,int string_length){$/;"	f
rightBrotherNode	dataStructure/B+Tree.h	/^	struct MyNode *rightBrotherNode;$/;"	m	struct:MyNode	typeref:struct:MyNode::MyNode
right_child_node	dataStructure/binary_sort_tree.h	/^	struct tree_node_tag *right_child_node;$/;"	m	struct:tree_node_tag	typeref:struct:tree_node_tag::tree_node_tag
save_landMark	others/fopen.c	/^void save_landMark(float array[],FILE **fp){$/;"	f
showHeap	dataStructure/binary_heap.c	/^void showHeap(Heap *localHeap){$/;"	f
showMaxStackElement	dataStructure/two_stack_form_one_queue/stack.c	/^void showMaxStackElement(MyStack *local_stack){$/;"	f
showQueue	dataStructure/two_stack_form_one_queue/two_stack_form_one_queue.c	/^void showQueue(StackFormedQueue *localQueue){$/;"	f
showStack	dataStructure/two_stack_form_one_queue/stack.c	/^void showStack(MyStack *temp_stack){$/;"	f
showTheArray	algorithms/quickSort.c	/^void showTheArray(NodeType *sortArray,int length){$/;"	f
showTheArrayWithEnd	algorithms/quickSort.c	/^void showTheArrayWithEnd(NodeType *sortArray,int beginFlag,int endFlag){$/;"	f
showTheKeyValueArray	dataStructure/B+Tree.c	/^void showTheKeyValueArray(int *keyValueArray,int arrayLength){$/;"	f
showThePointerArray	dataStructure/B+Tree.c	/^void showThePointerArray(BTreeNode **pointerArray,int arrayLength){$/;"	f
showTheQueue	dataStructure/queue.c	/^void showTheQueue(Queue *queue){$/;"	f
show_list	dataStructure/linked_list.c	/^void show_list(list_node *local_guard_node){$/;"	f
splitNode	dataStructure/B+Tree.c	/^BTreeNode *splitNode(BTreeNode *node){$/;"	f
stackNodeType	dataStructure/two_stack_form_one_queue/two_stack_form_one_queue.h	/^typedef node_type stackNodeType;$/;"	t
stackOne	dataStructure/two_stack_form_one_queue/two_stack_form_one_queue.h	/^	MyStack *stackOne;$/;"	m	struct:__anon1
stackTwo	dataStructure/two_stack_form_one_queue/two_stack_form_one_queue.h	/^	MyStack *stackTwo;$/;"	m	struct:__anon1
stack_array_count	dataStructure/two_stack_form_one_queue/stack.h	/^	int stack_array_count;$/;"	m	struct:__anon2
tail	dataStructure/linked_list.h	/^	list_node tail;$/;"	m	struct:list_tag
test	algorithms/string_rotate_check.c	/^void test(char *temp){$/;"	f
tree_node_tag	dataStructure/binary_sort_tree.h	/^typedef struct tree_node_tag{$/;"	s
tree_traversal_d_left_right	dataStructure/binary_sort_tree.c	/^void tree_traversal_d_left_right(TreeNode *tree_node){$/;"	f
tree_traversal_left_d_right	dataStructure/binary_sort_tree.c	/^void tree_traversal_left_d_right(TreeNode *tree_node){$/;"	f
tree_traversal_left_right_d	dataStructure/binary_sort_tree.c	/^void tree_traversal_left_right_d(TreeNode *tree_node){$/;"	f
true	algorithms/calculate_string_distance.h	4;"	d
true	algorithms/string_rotate_check.h	4;"	d
xorPointerSwap	dataStructure/B+Tree.c	/^void xorPointerSwap(BTreeNode **pointerOne,BTreeNode **pointerTwo){$/;"	f
xorSwap	algorithms/quickSort.c	/^void xorSwap(NodeType *numOne,NodeType *numTwo){$/;"	f
xorSwap	dataStructure/B+Tree.c	/^void xorSwap(KeyType *numOne,KeyType *numTwo){$/;"	f

!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARRAY_COUNT	binary_sort_tree.h	/^int static ARRAY_COUNT=1;$/;"	v
ARRAY_LENGTH	binary_sort_tree.h	9;"	d
DeQueue	queue.c	/^void DeQueue(Queue *queue){$/;"	f
DeleteTreeNode	binary_sort_tree.c	/^void DeleteTreeNode(TreeNode *root_node,int node_value){$/;"	f
EnQueue	queue.c	/^void EnQueue(queueElementType element,Queue *queue){$/;"	f
FALSE	binary_sort_tree.h	8;"	d
FALSE	queue.h	5;"	d
GlobalPointTemp	binary_sort_tree.h	/^int *GlobalPointTemp;$/;"	v
InitBinaryTree	binary_sort_tree.c	/^TreeNode *InitBinaryTree(int node_value){$/;"	f
InsertTreeNode	binary_sort_tree.c	/^void InsertTreeNode(TreeNode *root_node,int node_value){$/;"	f
LANDMAKR_PATH	fopen.c	4;"	d	file:
LANDMARK_NUMBER	fopen.c	3;"	d	file:
LEFT_NODE	binary_sort_tree.h	5;"	d
MaxElement	queue.c	/^queueElementType MaxElement(){$/;"	f
MyStack	stack.h	/^}MyStack;$/;"	t	typeref:struct:__anon2
MyType	test.c	/^typedef char MyType;$/;"	t	file:
NEGATIVE_SINGNAL	stack.h	4;"	d
NIL	binary_sort_tree.h	4;"	d
PrintNodeValue	binary_sort_tree.c	/^void PrintNodeValue(TreeNode *arbitrary_tree_node){$/;"	f
QUEUE_LENGTH	queue.h	6;"	d
Queue	queue.h	/^}Queue;$/;"	t	typeref:struct:__anon3
RIGHT_NODE	binary_sort_tree.h	6;"	d
ReMallocNodeArray	binary_sort_tree.c	/^void ReMallocNodeArray(TreeNode **tree_node_array){$/;"	f
Remalloc	test.c	/^void Remalloc(MyType **temp){$/;"	f
SIZEOFP	binary_sort_tree.h	/^int static const SIZEOFP=sizeof(GlobalPointTemp);$/;"	v
STACK_LENGTH	stack.h	3;"	d
STRING_ONE_BEGIN	calculate_string_distance.h	5;"	d
STRING_TWO_BEGIN	calculate_string_distance.h	6;"	d
StackFormedQueue	two_stack_form_one_queue.h	/^}StackFormedQueue;$/;"	t	typeref:struct:__anon1
TRUE	binary_sort_tree.h	7;"	d
TRUE	queue.h	4;"	d
TreeDepth	binary_sort_tree.c	/^int TreeDepth(TreeNode *tree_node){$/;"	f
TreeLevelTraversal	binary_sort_tree.c	/^void TreeLevelTraversal(TreeNode *root_node){$/;"	f
TreeMaximumNode	binary_sort_tree.c	/^TreeNode *TreeMaximumNode(TreeNode *temporary_node){$/;"	f
TreeMinimumNode	binary_sort_tree.c	/^TreeNode *TreeMinimumNode(TreeNode *temporary_node){$/;"	f
TreeNode	binary_sort_tree.h	/^}TreeNode;$/;"	t	typeref:struct:tree_node_tag
TreeNodeMalloc	binary_sort_tree.c	/^TreeNode *TreeNodeMalloc(){$/;"	f
TreeSearch	binary_sort_tree.c	/^TreeNode *TreeSearch(TreeNode *root_node, int searched_node_value){$/;"	f
TreeSuccessor	binary_sort_tree.c	/^TreeNode *TreeSuccessor(TreeNode *temporary_node){$/;"	f
begin	queue.h	/^	int begin;$/;"	m	struct:__anon3
calculate_string_distance	calculate_string_distance.c	/^int calculate_string_distance(char *string_one,char *string_two,$/;"	f
calculate_string_distance_recursion	calculate_string_distance.c	/^int calculate_string_distance_recursion(char *string_one,char *string_two,$/;"	f
create_list	linked_list.c	/^void create_list(list_node *local_guard_node){$/;"	f
current_position	stack.h	/^	int current_position;$/;"	m	struct:__anon2
deQueue	two_stack_form_one_queue.c	/^void deQueue(StackFormedQueue *localQueue){$/;"	f
delete_node	linked_list.c	/^void delete_node(list_node *local_guard_node, int local_value){$/;"	f
double_copy_string	string_rotate_check.c	/^char * double_copy_string(char *source_string,int string_length){$/;"	f
elementCount	queue.h	/^	int elementCount;$/;"	m	struct:__anon3
enQueue	two_stack_form_one_queue.c	/^void enQueue(StackFormedQueue *localQueue,stackNodeType local_node){$/;"	f
end	queue.h	/^	int end;$/;"	m	struct:__anon3
false	caclulate_string_distance.h	3;"	d
false	calculate_string_distance.h	3;"	d
false	string_rotate_check.h	3;"	d
father_node	binary_sort_tree.h	/^	struct tree_node_tag *father_node;$/;"	m	struct:tree_node_tag	typeref:struct:tree_node_tag::tree_node_tag
freeQueue	two_stack_form_one_queue.c	/^void freeQueue(StackFormedQueue *localQueue){$/;"	f
freeStack	stack.c	/^void freeStack(MyStack *local_stack){$/;"	f
free_node	linked_list.c	/^void free_node(list_node *guard_node){$/;"	f
head	linked_list.h	/^	list_node head;$/;"	m	struct:list_tag
initialQueue	two_stack_form_one_queue.c	/^void initialQueue(StackFormedQueue *localQueue){$/;"	f
initialStack	stack.c	/^void initialStack(MyStack *temp_stack){$/;"	f
insert_node	linked_list.c	/^void insert_node(list_node *local_guard_node,int new_node_value){$/;"	f
is_include_rotate_string	string_rotate_check.c	/^int is_include_rotate_string(char *compared_string,$/;"	f
left_child_node	binary_sort_tree.h	/^	struct tree_node_tag *left_child_node;$/;"	m	struct:tree_node_tag	typeref:struct:tree_node_tag::tree_node_tag
length	linked_list.h	/^	int length;$/;"	m	struct:list_tag
linked_list	linked_list.h	/^}linked_list;$/;"	t	typeref:struct:list_tag
list_node	linked_list.h	/^}list_node;$/;"	t	typeref:struct:node_tag
list_search	linked_list.c	/^list_node *list_search(list_node *local_guard_node,int local_node_value){$/;"	f
list_tag	linked_list.h	/^typedef struct list_tag{$/;"	s
main	binary_sort_tree.c	/^int main(void){$/;"	f
main	calculate_string_distance.c	/^int main(void){$/;"	f
main	fopen.c	/^int main(void){$/;"	f
main	linked_list.c	/^int main(){$/;"	f
main	queue.c	/^int main(void){$/;"	f
main	reversal_char.c	/^int main(){$/;"	f
main	string_rotate_check.c	/^int main(void){$/;"	f
main	test.c	/^int main(){$/;"	f
main	two_stack_form_one_queue.c	/^int main(void){$/;"	f
maxElement	stack.c	/^node_type maxElement(MyStack *temp_stack){$/;"	f
maxNodeIndexArray	stack.h	/^	node_type *maxNodeIndexArray;$/;"	m	struct:__anon2
maxPosition	stack.h	/^	int maxPosition;$/;"	m	struct:__anon2
maxQueueElement	two_stack_form_one_queue.c	/^stackNodeType maxQueueElement(StackFormedQueue *localQueue){$/;"	f
next_node	linked_list.h	/^	struct	node_tag *next_node;$/;"	m	struct:node_tag	typeref:struct:node_tag::node_tag
nodeArray	stack.h	/^	node_type *nodeArray;$/;"	m	struct:__anon2
node_malloc	linked_list.c	/^list_node *node_malloc(){$/;"	f
node_tag	linked_list.h	/^typedef struct node_tag{$/;"	s
node_type	stack.h	/^typedef int node_type;$/;"	t
node_value	binary_sort_tree.h	/^	int node_value;$/;"	m	struct:tree_node_tag
node_value	linked_list.h	/^	int node_value;$/;"	m	struct:node_tag
pop	stack.c	/^void pop(MyStack *temp_stack){$/;"	f
previous_node	linked_list.h	/^	struct  node_tag *previous_node;$/;"	m	struct:node_tag	typeref:struct:node_tag::node_tag
push	stack.c	/^void push(MyStack *temp_stack,node_type node_value){$/;"	f
queueArray	queue.h	/^	queueElementType *queueArray;$/;"	m	struct:__anon3
queueElementType	queue.h	/^typedef int queueElementType;$/;"	t
queueInitialize	queue.c	/^void queueInitialize(Queue *queue){$/;"	f
reMalloc	stack.c	/^void reMalloc(MyStack *temp_stack){$/;"	f
reversal_string	reversal_char.c	/^void reversal_string(char *source_string,int string_length){$/;"	f
right_child_node	binary_sort_tree.h	/^	struct tree_node_tag *right_child_node;$/;"	m	struct:tree_node_tag	typeref:struct:tree_node_tag::tree_node_tag
save_landMark	fopen.c	/^void save_landMark(float array[],FILE **fp){$/;"	f
showMaxElement	stack.c	/^void showMaxElement(MyStack *local_stack){$/;"	f
showStack	stack.c	/^void showStack(MyStack *temp_stack){$/;"	f
showTheQueue	queue.c	/^void showTheQueue(Queue *queue){$/;"	f
show_list	linked_list.c	/^void show_list(list_node *local_guard_node){$/;"	f
stackNodeType	two_stack_form_one_queue.h	/^typedef node_type stackNodeType;$/;"	t
stackOne	two_stack_form_one_queue.h	/^	MyStack stackOne;$/;"	m	struct:__anon1
stackTwo	two_stack_form_one_queue.h	/^	MyStack stackTwo;$/;"	m	struct:__anon1
stack_array_count	stack.h	/^	int stack_array_count;$/;"	m	struct:__anon2
tail	linked_list.h	/^	list_node tail;$/;"	m	struct:list_tag
test	string_rotate_check.c	/^void test(char *temp){$/;"	f
test	test.c	/^void test(int **temp){$/;"	f
test2	test.c	/^int *test2(){$/;"	f
test3	test.c	/^void test3(char **char1,int row,int column){$/;"	f
tree_node_tag	binary_sort_tree.h	/^typedef struct tree_node_tag{$/;"	s
tree_traversal_d_left_right	binary_sort_tree.c	/^void tree_traversal_d_left_right(TreeNode *tree_node){$/;"	f
tree_traversal_left_d_right	binary_sort_tree.c	/^void tree_traversal_left_d_right(TreeNode *tree_node){$/;"	f
tree_traversal_left_right_d	binary_sort_tree.c	/^void tree_traversal_left_right_d(TreeNode *tree_node){$/;"	f
true	caclulate_string_distance.h	4;"	d
true	calculate_string_distance.h	4;"	d
true	string_rotate_check.h	4;"	d
